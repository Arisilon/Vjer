ARG CICD_IMAGE_REPO
ARG BUILD_VERSION
FROM ${CICD_IMAGE_REPO}bart-base:${BUILD_VERSION}

ENV HELM_VERSION=3.10.3
ENV KUBECTL_VERSION=1.24.16

WORKDIR /work
SHELL ["/bin/bash", "-o", "pipefail", "-c"]
# hadolint ignore=DL3008
RUN RED='\033[0;31m' && \
    NC='\033[0m' && \
    echo -e "${RED} Install Google Cloud SDK ${NC}" && \
    echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && \
    curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - && \
    apt-get -y update && \
    apt-get -y --no-install-recommends install google-cloud-sdk && \
    apt-get -y --no-install-recommends install google-cloud-sdk-gke-gcloud-auth-plugin && \
    echo -e "${RED} Install kubectl ${NC}" && \
    curl -fsSL "https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl" -o /usr/local/bin/kubectl && \
    chmod +x /usr/local/bin/kubectl && \
    echo -e "${RED} Install Docker CLI ${NC}" && \
    curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg && \
    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get -y update && \
    apt-get -y --no-install-recommends install docker-ce-cli && \
    echo -e "${RED} Install Helm ${NC}" && \
    # Helm 3.11 requires Google auth plugin
    # curl -fsSL https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash && \
    curl -fsSL "https://get.helm.sh/helm-v${HELM_VERSION}-linux-amd64.tar.gz" | tar xzf - --strip-components=1 -C /usr/local/bin linux-amd64/helm && \
    chmod 755 /usr/local/bin/helm && \
    helm plugin install --version 1.0.2 https://github.com/belitre/helm-push-artifactory-plugin && \
    helm repo add coco-oc --username "${JFROG_USER_LOGIN}" --password "${JFROG_USER_TOKEN}" "${HELM_REPO}" && \
    echo -e "${RED} Run tool report ${NC}" && \
    python /cicd-scripts/tool_report.py -o /cicd-scripts/tool_report.yml && \
    cat /cicd-scripts/tool_report.yml && \
    echo -e "${RED} Cleanup ${NC}" && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
