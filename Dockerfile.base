ARG PYTHON_RELEASE
ARG UBUNTU_RELEASE
FROM python:${PYTHON_RELEASE}-slim-${UBUNTU_RELEASE} as base

ARG ARTIFACTORY_URL
ARG JFROG_USER_LOGIN
ARG JFROG_USER_TOKEN
ARG HELM_REPO
ENV ARTIFACTORY_URL=$ARTIFACTORY_URL
ENV JFROG_USER_LOGIN=$JFROG_USER_LOGIN
ENV JFROG_USER_TOKEN=$JFROG_USER_TOKEN
ENV HELM_REPO=$HELM_REPO

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV ANSIBLE_HOST_KEY_CHECKING=False
# ENV USE_GKE_GCLOUD_AUTH_PLUGIN=True

WORKDIR /
COPY requirements-frozen-linux.txt requirements-frozen.txt
COPY cicd-scripts/ cicd-scripts/
COPY ansible /usr/share/ansible/
COPY gitlab-server.crt /usr/local/share/ca-certificates/
# hadolint ignore=DL3013
RUN python -m pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir --upgrade setuptools wheel && \
    pip install --no-cache-dir --upgrade --requirement requirements-frozen.txt && \
    rm requirements-frozen.txt

FROM base as test
COPY pyproject.toml .
RUN flake8 cicd-scripts && \
    pylint cicd-scripts && \
    mypy cicd-scripts

FROM base as final
WORKDIR /work
SHELL ["/bin/bash", "-o", "pipefail", "-c"]
# hadolint ignore=DL3008
RUN RED='\033[0;31m' && \
    NC='\033[0m' && \
    echo -e "${RED} Install OS software packages ${NC}" && \
    apt-get -y update && \
    apt-get -y --no-install-recommends install ca-certificates curl git gnupg software-properties-common lsb-release openssh-client sshpass p7zip-full && \
    update-ca-certificates && \
    echo -e "${RED} Run tool report ${NC}" && \
    python /cicd-scripts/tool_report.py -o /cicd-scripts/tool_report.yml && \
    cat /cicd-scripts/tool_report.yml && \
    echo -e "${RED} Cleanup ${NC}" && \
    chmod +x /cicd-scripts/*.sh && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
